AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  todo-list-aws

  Sample SAM Template for todo-list-aws

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Runtime: python3.7
    #Timeout: 180
    Environment:
      Variables:
        DYNAMODB_TABLE: !Sub "todosTable-${Stage}"
        ENVIRONMENT: !Ref Stage
        
Parameters:
  Stage:
    Type: String
    Default: default
    AllowedValues:
      - default
      - staging
      - production
    Description: Ingrese el entorno a desplegar (staging o production). Por defecto es default.

Resources:
  ListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: list.list
      Events:
        List:
          Type: Api
          Properties:
            Path: /todos
            Method: get
      Policies:
        Statement:
          Effect: Allow
          Action:
           - 'dynamodb:Query'
           - 'dynamodb:Scan'
           - 'dynamodb:GetItem'
           - 'dynamodb:PutItem'
           - 'dynamodb:UpdateItem'
           - 'dynamodb:DeleteItem'
          Resource:
             !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/todosTable-${Stage}"
  
  GetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: get.get
      Events:
        List:
          Type: Api
          Properties:
            Path: /todos/{id}
            Method: get
      Policies:
        Statement:
          Effect: Allow
          Action:
           - 'dynamodb:Query'
           - 'dynamodb:Scan'
           - 'dynamodb:GetItem'
           - 'dynamodb:PutItem'
           - 'dynamodb:UpdateItem'
           - 'dynamodb:DeleteItem'
          Resource:
             !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/todosTable-${Stage}"
  
  CreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: create.create
      Events:
        Create:
          Type: Api
          Properties:
            Path: /todos
            Method: post
      Policies:
        Statement:
         Effect: Allow
         Action:
           - 'dynamodb:Query'
           - 'dynamodb:Scan'
           - 'dynamodb:GetItem'
           - 'dynamodb:PutItem'
           - 'dynamodb:UpdateItem'
           - 'dynamodb:DeleteItem'
         Resource:
           !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/todosTable-${Stage}"
  
  DeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: delete.delete
      Events:
        Create:
          Type: Api
          Properties:
            Path: /todos/{id}
            Method: delete
      Policies:
        Statement:
         Effect: Allow
         Action:
           - 'dynamodb:Query'
           - 'dynamodb:Scan'
           - 'dynamodb:GetItem'
           - 'dynamodb:PutItem'
           - 'dynamodb:UpdateItem'
           - 'dynamodb:DeleteItem'
         Resource:
           !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/todosTable-${Stage}"
  
  UpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: update.update
      Events:
        Create:
          Type: Api
          Properties:
            Path: /todos/{id}
            Method: put
      Policies:
        Statement:
         Effect: Allow
         Action:
           - 'dynamodb:Query'
           - 'dynamodb:Scan'
           - 'dynamodb:GetItem'
           - 'dynamodb:PutItem'
           - 'dynamodb:UpdateItem'
           - 'dynamodb:DeleteItem'
         Resource:
           !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/todosTable-${Stage}"
  
  TranslateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: translate.translate
      Events:
        Translate:
          Type: Api
          Properties:
            Path: /todos/{id}/{lang}
            Method: get
      Policies:
        Statement:
        - Sid: AccesoDynamoDB
          Effect: Allow
          Action:
           - 'dynamodb:Query'
           - 'dynamodb:Scan'
           - 'dynamodb:GetItem'
           - 'dynamodb:PutItem'
           - 'dynamodb:UpdateItem'
           - 'dynamodb:DeleteItem'
          Resource:
            !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/todosTable-${Stage}"
        - Sid: AccesoAmazonTranslate
          Effect: Allow
          Action:
           - 'translate:TranslateText'
           - 'translate:GetTerminology'
           - 'translate:ListTerminologies'
           - 'translate:ListTextTranslationJobs'
           - 'translate:DescribeTextTranslationJob'
           - 'translate:GetParallelData'
           - 'translate:ListParallelData'
           - 'comprehend:DetectDominantLanguage'
           - 'cloudwatch:GetMetricStatistics'
           - 'cloudwatch:ListMetrics'
          Resource: "*"
            
  todosTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub "todosTable-${Stage}"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

Outputs:
  ListApi:
    Description: "API Gateway endpoint URL for ${Stage} stage for List function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/todos/"
  ListFunction:
    Description: "List Lambda Function ARN"
    Value: !GetAtt ListFunction.Arn
  ListFunctionIamRole:
    Description: "Implicit IAM Role created for List function"
    Value: !GetAtt ListFunctionRole.Arn
  GetApi:
    Description: "API Gateway endpoint URL for ${Stage} stage for Get function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/todos/{id}"
  GetFunction:
    Description: "Get Lambda Function ARN"
    Value: !GetAtt GetFunction.Arn
  GetFunctionIamRole:
    Description: "Implicit IAM Role created for Get function"
    Value: !GetAtt GetFunctionRole.Arn
  CreateApi:
    Description: "API Gateway endpoint URL for ${Stage} stage for Create function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/todos/"
  CreateFunction:
    Description: "Create Lambda Function ARN"
    Value: !GetAtt CreateFunction.Arn
  CreateFunctionIamRole:
    Description: "Implicit IAM Role created for Create function"
    Value: !GetAtt CreateFunctionRole.Arn
  DeleteApi:
    Description: "API Gateway endpoint URL for ${Stage} stage for Delete function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/todos/{id}"
  DeleteFunction:
    Description: "Delete Lambda Function ARN"
    Value: !GetAtt DeleteFunction.Arn
  DeleteFunctionIamRole:
    Description: "Implicit IAM Role created for Delete function"
    Value: !GetAtt DeleteFunctionRole.Arn
  UpdateApi:
    Description: "API Gateway endpoint URL for ${Stage} stage for Update function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/todos/{id}"
  UpdateFunction:
    Description: "Update Lambda Function ARN"
    Value: !GetAtt UpdateFunction.Arn
  UpdateFunctionIamRole:
    Description: "Implicit IAM Role created for Update function"
    Value: !GetAtt UpdateFunctionRole.Arn
  TranslateApi:
    Description: "API Gateway endpoint URL for ${Stage} stage for Translate function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/todos/{id}{lang}"
  TranslateFunction:
    Description: "Translate Lambda Function ARN"
    Value: !GetAtt TranslateFunction.Arn
  TranslateFunctionIamRole:
    Description: "Implicit IAM Role created for Translate function"
    Value: !GetAtt TranslateFunctionRole.Arn

